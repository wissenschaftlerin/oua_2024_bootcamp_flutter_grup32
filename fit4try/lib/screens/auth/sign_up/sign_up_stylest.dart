import 'dart:async';
import 'dart:io';

import 'package:file_picker/file_picker.dart';
import 'package:fit4try/bloc/auth/auth_bloc.dart';
import 'package:fit4try/bloc/auth/auth_event.dart';
import 'package:fit4try/bloc/auth/auth_state.dart';
import 'package:fit4try/constants/fonts.dart';
import 'package:fit4try/constants/style.dart';
import 'package:fit4try/screens/auth/sign_up/sign_up_stylest.dart';
import 'package:fit4try/screens/auth/sign_up/sign_up_user.dart';
import 'package:fit4try/screens/user/home.dart';
import 'package:fit4try/widgets/buttons.dart';
import 'package:fit4try/widgets/flash_message.dart';
import 'package:fit4try/widgets/text_field.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:page_transition/page_transition.dart';

class SignUpStylest extends StatefulWidget {
  const SignUpStylest({super.key});

  @override
  State<SignUpStylest> createState() => _SignUpStylestState();
}

class _SignUpStylestState extends State<SignUpStylest> {
  final PageController _pageController = PageController();
  int _currentStep = 0;
  final List<TextEditingController> _controllers =
      List.generate(7, (_) => TextEditingController());
  late StreamController<bool> _buttonStateController;
  final AuthBloc _authBloc = AuthBloc();
  Map<int, Color> _stepColors = {
    0: AppColors.primaryColor1,
    1: AppColors.primaryColor2,
    2: AppColors.primaryColor3,
    3: AppColors.primaryColor4,
    4: AppColors.primaryColor5,
  };

  @override
  void initState() {
    super.initState();
    _buttonStateController = StreamController<bool>.broadcast();
    for (var controller in _controllers) {
      controller.addListener(_updateNextButtonState);
    }
  }

  @override
  void dispose() {
    _buttonStateController.close();
    for (var controller in _controllers) {
      controller.removeListener(_updateNextButtonState);
      controller.dispose();
    }
    super.dispose();
  }

  void _updateNextButtonState() {
    bool isFilled = _controllers[_currentStep].text.isNotEmpty;
    _buttonStateController.add(isFilled);
  }

  void _nextPage() {
    if (_currentStep < 4) {
      if (_currentStep == 0) {
        try {
          if (_controllers[3] != _controllers[4]) {
            print("sayfa 1 in next geÃ§meden hali");
            _authBloc.add(AuthUserInfoSubmitted(
              _controllers[0].text,
              _controllers[1].text,
              _controllers[2].text,
              _controllers[3].text, _controllers[6].text,
              0, // methodsType deÄŸiÅŸkenini burada belirleyin
            ));
            print("tamamlandÄ±");
            setState(() {
              _currentStep++;
            });
            _pageController.nextPage(
              duration: Duration(milliseconds: 300),
              curve: Curves.easeIn,
            );
          } else {
            showErrorSnackBar(context, "Åžifreler eÅŸleÅŸmiyor");
          }
        } catch (e) {
          print("hata var");
        }
      } else if (_currentStep == 1) {
        print("asdasd");
        _authBloc.add(AuthUserInfoSubmitted(
          _controllers[0].text,
          _controllers[1].text,
          _controllers[2].text,
          _controllers[3].text,
          _controllers[6].text,
          1, // methodsType deÄŸiÅŸkenini burada belirleyin
        ));
        print("tamamlandÄ±");
        setState(() {
          _currentStep++;
        });
        _pageController.nextPage(
          duration: Duration(milliseconds: 300),
          curve: Curves.easeIn,
        );
      } else if (_currentStep == 2) {
        setState(() {
          _currentStep++;
        });
      } else if (_currentStep == 3) {
        Navigator.pushReplacement(
            context, MaterialPageRoute(builder: (context) => Home()));
      } else if (_currentStep == 4) {
        setState(() {
          _currentStep++;
        });
      }
    }
  }

  void _previousPage() {
    if (_currentStep > 0) {
      setState(() {
        _currentStep--;
      });
      _pageController.previousPage(
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    }
  }

  Widget _buildProgressBar() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(5, (index) {
        return Container(
          margin: EdgeInsets.symmetric(horizontal: 4.0),
          width: 40.0,
          height: 8.0,
          decoration: BoxDecoration(
            color: index <= _currentStep ? _stepColors[index] : Colors.grey,
            borderRadius: BorderRadius.circular(4.0),
          ),
        );
      }),
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => _authBloc,
      child: Scaffold(
        backgroundColor: AppColors.backgroundColor1,
        body: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            SizedBox(height: 75),
            _buildProgressBar(),
            Expanded(
              child: PageView.builder(
                controller: _pageController,
                physics: NeverScrollableScrollPhysics(),
                itemCount: 5,
                itemBuilder: (context, index) {
                  switch (index) {
                    case 0:
                      return StylestInfoStep(
                          nameController: _controllers[0],
                          usernameController: _controllers[1],
                          emailController: _controllers[2],
                          passwordController: _controllers[3],
                          passwordControlleragain: _controllers[4]);
                    case 1:
                      return VerificationStep(
                        verificationController: _controllers[5],
                        // onNext: () {
                        //   // _authBloc.add(AuthVerificationCodeSubmitted(
                        //   //     _controllers[4].text));
                        //   // _nextPage();
                        // },
                      );
                    case 2:
                      return PhotoUploadStep(
                        onNext: (photoUrl) {
                          _authBloc.add(AuthPhotoUploaded(photoUrl));
                          _nextPage();
                        },
                      );

                    case 3:
                      return DeneyimStep(
                          onNext: _nextPage,
                          bahsetmeController: _controllers[6]);
                    case 4:
                      return WelcomeStep(onNext: _nextPage);
                    default:
                      return Container();
                  }
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  if (_currentStep > 0)
                    MyButton(
                      text: "Geri",
                      buttonColor: AppColors.secondaryColor2,
                      buttonTextColor: Colors.white,
                      buttonTextSize: 15,
                      buttonTextWeight: FontWeight.normal,
                      borderRadius: BorderRadius.circular(16),
                      onPressed: _previousPage,
                      buttonWidth: ButtonWidth.small,
                    ),
                  StreamBuilder<bool>(
                    stream: _buttonStateController.stream,
                    initialData: false,
                    builder: (context, snapshot) {
                      return MyButton(
                          text: "Ä°leri",
                          buttonColor: AppColors.primaryColor2,
                          buttonTextColor: Colors.white,
                          buttonTextSize: 20,
                          buttonTextWeight: FontWeight.normal,
                          borderRadius: BorderRadius.circular(16),
                          onPressed: snapshot.data! ? _nextPage : () {},
                          buttonWidth: ButtonWidth.large);
                      // ElevatedButton(
                      //   onPressed: snapshot.data! ? _nextPage : null,
                      //   child: Text('Ä°leri'),
                      // );
                    },
                  ),
                ],
              ),
            ),
            SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}

class StylestInfoStep extends StatefulWidget {
  final TextEditingController nameController;
  final TextEditingController usernameController;
  final TextEditingController emailController;
  final TextEditingController passwordController;
  final TextEditingController passwordControlleragain;
  // final VoidCallback onNext;

  StylestInfoStep({
    required this.nameController,
    required this.usernameController,
    required this.emailController,
    required this.passwordController,
    required this.passwordControlleragain,
    // required this.onNext,
  });

  @override
  _StylestInfoStepState createState() => _StylestInfoStepState();
}

class _StylestInfoStepState extends State<StylestInfoStep> {
  bool _isPasswordVisible = false;

  void _togglePasswordVisibility() {
    setState(() {
      _isPasswordVisible = !_isPasswordVisible;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'KullanÄ±cÄ± Bilgileri ðŸ‘¤',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16),
            MyTextField(
                controller: widget.nameController,
                hintText: 'Ä°sim Soyisim',
                obscureText: false,
                showBorder: true,
                keyboardType: TextInputType.multiline,
                enabled: true),
            SizedBox(height: 16),
            MyTextField(
                controller: widget.usernameController,
                hintText: 'KullanÄ±cÄ± AdÄ±',
                obscureText: false,
                showBorder: true,
                keyboardType: TextInputType.multiline,
                enabled: true),
            SizedBox(height: 16),
            MyTextField(
                controller: widget.emailController,
                hintText: 'Email',
                obscureText: false,
                showBorder: true,
                keyboardType: TextInputType.emailAddress,
                enabled: true),
            SizedBox(height: 16),
            MyTextField(
              controller: widget.passwordController,
              hintText: "Åžifre",
              obscureText: _isPasswordVisible ? true : false,
              keyboardType: TextInputType.text,
              enabled: true,
              showBorder: true,
              onTap: _togglePasswordVisibility,
              maxLines: 1,
              suffixIcon: Icon(
                !_isPasswordVisible ? Icons.visibility : Icons.visibility_off,
              ),
            ),
            SizedBox(height: 16),
            MyTextField(
              controller: widget.passwordControlleragain,
              hintText: "Åžifre Tekrar",
              obscureText: _isPasswordVisible ? true : false,
              keyboardType: TextInputType.text,
              enabled: true,
              showBorder: true,
              onTap: _togglePasswordVisibility,
              maxLines: 1,
              suffixIcon: Icon(
                !_isPasswordVisible ? Icons.visibility : Icons.visibility_off,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class VerificationStep extends StatelessWidget {
  final TextEditingController verificationController;
  // final VoidCallback onNext;

  VerificationStep({
    required this.verificationController,
    // required this.onNext,
  });

  @override
  Widget build(BuildContext context) {
    return Center(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Mailini Kontrol Et ðŸ“©',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 16),
            Text(
                "DoÄŸrulama kodunu e-posta adresinize gÃ¶nderdik. LÃ¼tfen e-postanÄ±zÄ± kontrol edin ve e-postanÄ±zÄ± doÄŸrulamayÄ± unutmayÄ±nÄ±z",
                style: fontStyle(15, Colors.black, FontWeight.normal)),
            SizedBox(height: 16),
            // ElevatedButton(
            //   onPressed: onNext,
            //   child: Text('Ä°leri'),
            // ),
          ],
        ),
      ),
    );
  }
}

class PhotoUploadStep extends StatelessWidget {
  final ValueChanged<String> onNext;

  PhotoUploadStep({required this.onNext});

  Future<void> _selectPhoto(ImageSource source) async {
    final ImagePicker _picker = ImagePicker();
    final XFile? image = await _picker.pickImage(source: source);

    if (image != null) {
      String photoUrl = image.path;

      onNext(photoUrl);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              "Seni gÃ¶rmek harika! ðŸ’œ",
              style: fontStyle(28, Colors.black, FontWeight.bold),
              textAlign: TextAlign.left,
            ),
            SizedBox(
              height: 10,
            ),
            Text(
              "Buralar alev aldÄ±. Seni gÃ¶rmek bir harika aramÄ±za katÄ±lmana Ã§ok az kaldÄ±. Hadi hemen fotoÄŸrafÄ±nÄ± yÃ¼kle ve aramÄ±za katÄ±l.",
              style: fontStyle(15, Colors.black, FontWeight.normal),
            ),
            SizedBox(
              height: 50,
            ),
            MyButton(
                text: "Galeriden SeÃ§",
                buttonColor: AppColors.primaryColor3,
                buttonTextColor: Colors.white,
                buttonTextSize: 20,
                borderRadius: BorderRadius.circular(16),
                buttonTextWeight: FontWeight.normal,
                onPressed: () => _selectPhoto(ImageSource.gallery),
                buttonWidth: ButtonWidth.large),
            SizedBox(height: 16),
            MyButton(
                text: "FotoÄŸraf Ã‡ek",
                borderRadius: BorderRadius.circular(16),
                buttonColor: AppColors.primaryColor3,
                buttonTextColor: Colors.white,
                buttonTextSize: 20,
                buttonTextWeight: FontWeight.normal,
                onPressed: () => _selectPhoto(ImageSource.camera),
                buttonWidth: ButtonWidth.large),
            SizedBox(height: 16),
          ],
        ),
      ),
    );
  }
}

class DeneyimStep extends StatefulWidget {
  final VoidCallback onNext;
  final TextEditingController bahsetmeController;

  DeneyimStep({required this.onNext, required this.bahsetmeController});

  @override
  _DeneyimStepState createState() => _DeneyimStepState();
}

class _DeneyimStepState extends State<DeneyimStep> {
  bool _fileSelected = false;
  File? _file;

  void _pickFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles();
    if (result != null && result.files.single.path != null) {
      setState(() {
        _file = File(result.files.single.path!);
        _fileSelected = true;
      });
    }
  }

  void _uploadFileAndSaveLink() {
    if (_file != null) {
      BlocProvider.of<AuthBloc>(context).add(UploadFileEvent(_file!));
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('LÃ¼tfen bir dosya seÃ§in.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: BlocListener<AuthBloc, AuthState>(
        listener: (context, state) {
          if (state is AuthFileUploadSuccess) {
            BlocProvider.of<AuthBloc>(context)
                .add(UpdateUserInformation(state.fileUrl));
          } else if (state is AuthUpdateSuccess) {
            widget.onNext();
          } else if (state is AuthFileUploadFailure ||
              state is AuthUpdateFailure) {
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(
              content: Text(
                  'Error: ${state is AuthFileUploadFailure ? state.error : (state as AuthUpdateFailure).error}'),
            ));
          }
        },
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'Deneyimlerinden Bahseder Misin?',
              style: fontStyle(28, Colors.black, FontWeight.bold),
              overflow: TextOverflow.visible,
            ),
            SizedBox(
              height: 15,
            ),
            Text(
              'Ä°Ã§eride sana danÄ±ÅŸabilecek bir Ã§ok insan var. Bu sebeple seni daha yakÄ±ndan tanÄ±mak istiyoruz. Ä°ster kendini anlatabilir veya portfÃ¶yÃ¼nÃ¼ koyabilirsin?',
              style: fontStyle(15, Colors.black, FontWeight.normal),
            ),
            SizedBox(
              height: 30,
            ),
            MyTextField(
              controller: widget.bahsetmeController,
              hintText: "KÄ±saca kendinden bahseder misin?",
              obscureText: false,
              keyboardType: TextInputType.text,
              enabled: true,
              maxLines: 5,
            ),
            SizedBox(
              height: 10,
            ),
            ElevatedButton.icon(
              icon: _fileSelected ? Icon(Icons.check) : Icon(Icons.attach_file),
              label: Text(
                "Dosya Ekle",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                  fontWeight: FontWeight.normal,
                ),
              ),
              onPressed: _pickFile,
            ),
            SizedBox(
              height: 10,
            ),
            ElevatedButton(
              onPressed: _uploadFileAndSaveLink,
              child: Text('BaÅŸla'),
            ),
          ],
        ),
      ),
    );
  }
}

class WelcomeStep extends StatelessWidget {
  final VoidCallback onNext;

  WelcomeStep({required this.onNext});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Seni Biraz BekleteceÄŸiz',
            style: fontStyle(28, Colors.black, FontWeight.bold),
          ),
          SizedBox(
            height: 30,
          ),
          Text(
            'Bizimle paylaÅŸtÄ±ÄŸÄ±n bilgileri ekibimiz inceliyor. Ä°nceleme bitene kadar uygulamada gezebilirsin. Ä°nceleme bittiÄŸinde herhangi bir sorun olmasÄ± durumunda seninle iletiÅŸime geÃ§eceÄŸiz. Herhangi bir sorun olmamasÄ± durumunda Fit4Try hesabÄ±n onaylÄ± olmuÅŸ olacak. En iyi dileklerimizle...',
            style: fontStyle(28, Colors.black, FontWeight.bold),
          ),
          SizedBox(
            height: 30,
          ),
          Image.asset("undraw_Chat_bot_re_e2gj.png", height: 100, width: 100),
          SizedBox(
            height: 30,
          ),
          ElevatedButton(
            onPressed: onNext,
            child: Text('BaÅŸla'),
          ),
        ],
      ),
    );
  }
}
